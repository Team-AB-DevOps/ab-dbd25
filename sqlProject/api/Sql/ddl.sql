CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);

START TRANSACTION;
CREATE TABLE genres (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    name varchar(255) NOT NULL,
    CONSTRAINT "PK_genres" PRIMARY KEY (id)
);

CREATE TABLE medias (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    name varchar(255) NOT NULL,
    type varchar(255) NOT NULL,
    runtime integer NOT NULL,
    description text NOT NULL,
    cover text NOT NULL,
    age_limit smallint,
    release date NOT NULL,
    created_at timestamp with time zone NOT NULL,
    CONSTRAINT "PK_medias" PRIMARY KEY (id)
);

CREATE TABLE persons (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    first_name varchar(255) NOT NULL,
    last_name varchar(255) NOT NULL,
    birth_date date NOT NULL,
    gender varchar(255) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    CONSTRAINT "PK_persons" PRIMARY KEY (id)
);

CREATE TABLE privileges (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    name varchar(255) NOT NULL,
    CONSTRAINT "PK_privileges" PRIMARY KEY (id)
);

CREATE TABLE roles (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    name varchar(255) NOT NULL,
    CONSTRAINT "PK_roles" PRIMARY KEY (id)
);

CREATE TABLE subscriptions (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    name varchar(255) NOT NULL,
    price smallint NOT NULL,
    CONSTRAINT "PK_subscriptions" PRIMARY KEY (id)
);

CREATE TABLE users (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    first_name varchar(255) NOT NULL,
    last_name varchar(255) NOT NULL,
    email varchar(255) NOT NULL,
    password text NOT NULL,
    created_at timestamp with time zone NOT NULL,
    CONSTRAINT "PK_users" PRIMARY KEY (id)
);

CREATE TABLE episodes (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    media_id integer NOT NULL,
    name varchar(255) NOT NULL,
    season_count smallint,
    episode_count smallint NOT NULL,
    runtime integer NOT NULL,
    description text NOT NULL,
    release date NOT NULL,
    created_at timestamp with time zone NOT NULL,
    CONSTRAINT "PK_episodes" PRIMARY KEY (id),
    CONSTRAINT "FK_episodes_medias_media_id" FOREIGN KEY (media_id) REFERENCES medias (id) ON DELETE CASCADE
);

CREATE TABLE medias_genres (
    "GenresId" integer NOT NULL,
    "MediasId" integer NOT NULL,
    CONSTRAINT "PK_medias_genres" PRIMARY KEY ("GenresId", "MediasId"),
    CONSTRAINT "FK_medias_genres_genres_GenresId" FOREIGN KEY ("GenresId") REFERENCES genres (id) ON DELETE CASCADE,
    CONSTRAINT "FK_medias_genres_medias_MediasId" FOREIGN KEY ("MediasId") REFERENCES medias (id) ON DELETE CASCADE
);

CREATE TABLE medias_persons_roles (
    media_id integer NOT NULL,
    person_id integer NOT NULL,
    role_id integer NOT NULL,
    CONSTRAINT "PK_medias_persons_roles" PRIMARY KEY (media_id, person_id, role_id),
    CONSTRAINT "FK_medias_persons_roles_medias_media_id" FOREIGN KEY (media_id) REFERENCES medias (id) ON DELETE CASCADE,
    CONSTRAINT "FK_medias_persons_roles_persons_person_id" FOREIGN KEY (person_id) REFERENCES persons (id) ON DELETE CASCADE,
    CONSTRAINT "FK_medias_persons_roles_roles_role_id" FOREIGN KEY (role_id) REFERENCES roles (id) ON DELETE CASCADE
);

CREATE TABLE genres_subscriptions (
    "GenresId" integer NOT NULL,
    "SubscriptionsId" integer NOT NULL,
    CONSTRAINT "PK_genres_subscriptions" PRIMARY KEY ("GenresId", "SubscriptionsId"),
    CONSTRAINT "FK_genres_subscriptions_genres_GenresId" FOREIGN KEY ("GenresId") REFERENCES genres (id) ON DELETE CASCADE,
    CONSTRAINT "FK_genres_subscriptions_subscriptions_SubscriptionsId" FOREIGN KEY ("SubscriptionsId") REFERENCES subscriptions (id) ON DELETE CASCADE
);

CREATE TABLE profiles (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    user_id integer NOT NULL,
    name varchar(255) NOT NULL,
    is_child boolean,
    created_at timestamp with time zone NOT NULL,
    CONSTRAINT "PK_profiles" PRIMARY KEY (id),
    CONSTRAINT "FK_profiles_users_user_id" FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE users_privileges (
    "PrivilegesId" integer NOT NULL,
    "UsersId" integer NOT NULL,
    CONSTRAINT "PK_users_privileges" PRIMARY KEY ("PrivilegesId", "UsersId"),
    CONSTRAINT "FK_users_privileges_privileges_PrivilegesId" FOREIGN KEY ("PrivilegesId") REFERENCES privileges (id) ON DELETE CASCADE,
    CONSTRAINT "FK_users_privileges_users_UsersId" FOREIGN KEY ("UsersId") REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE users_subscriptions (
    "SubscriptionsId" integer NOT NULL,
    "UsersId" integer NOT NULL,
    CONSTRAINT "PK_users_subscriptions" PRIMARY KEY ("SubscriptionsId", "UsersId"),
    CONSTRAINT "FK_users_subscriptions_subscriptions_SubscriptionsId" FOREIGN KEY ("SubscriptionsId") REFERENCES subscriptions (id) ON DELETE CASCADE,
    CONSTRAINT "FK_users_subscriptions_users_UsersId" FOREIGN KEY ("UsersId") REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE reviews (
    media_id integer NOT NULL,
    profile_id integer NOT NULL,
    description text,
    rating smallint NOT NULL,
    created_at timestamp with time zone NOT NULL,
    CONSTRAINT "PK_reviews" PRIMARY KEY (media_id, profile_id),
    CONSTRAINT "FK_reviews_medias_media_id" FOREIGN KEY (media_id) REFERENCES medias (id) ON DELETE CASCADE,
    CONSTRAINT "FK_reviews_profiles_profile_id" FOREIGN KEY (profile_id) REFERENCES profiles (id) ON DELETE CASCADE
);

CREATE TABLE watch_lists (
    profile_id integer NOT NULL,
    is_locked boolean,
    created_at timestamp with time zone NOT NULL,
    CONSTRAINT "PK_watch_lists" PRIMARY KEY (profile_id),
    CONSTRAINT "FK_watch_lists_profiles_profile_id" FOREIGN KEY (profile_id) REFERENCES profiles (id) ON DELETE CASCADE
);

CREATE TABLE watch_lists_medias (
    "MediasId" integer NOT NULL,
    "WatchListsProfileId" integer NOT NULL,
    CONSTRAINT "PK_watch_lists_medias" PRIMARY KEY ("MediasId", "WatchListsProfileId"),
    CONSTRAINT "FK_watch_lists_medias_medias_MediasId" FOREIGN KEY ("MediasId") REFERENCES medias (id) ON DELETE CASCADE,
    CONSTRAINT "FK_watch_lists_medias_watch_lists_WatchListsProfileId" FOREIGN KEY ("WatchListsProfileId") REFERENCES watch_lists (profile_id) ON DELETE CASCADE
);

CREATE INDEX "IX_episodes_media_id" ON episodes (media_id);

CREATE UNIQUE INDEX "IX_genres_name" ON genres (name);

CREATE INDEX "IX_genres_subscriptions_SubscriptionsId" ON genres_subscriptions ("SubscriptionsId");

CREATE INDEX "IX_medias_genres_MediasId" ON medias_genres ("MediasId");

CREATE INDEX "IX_medias_persons_roles_person_id" ON medias_persons_roles (person_id);

CREATE INDEX "IX_medias_persons_roles_role_id" ON medias_persons_roles (role_id);

CREATE UNIQUE INDEX "IX_privileges_name" ON privileges (name);

CREATE INDEX "IX_profiles_user_id" ON profiles (user_id);

CREATE INDEX "IX_reviews_profile_id" ON reviews (profile_id);

CREATE UNIQUE INDEX "IX_roles_name" ON roles (name);

CREATE UNIQUE INDEX "IX_subscriptions_name" ON subscriptions (name);

CREATE INDEX "IX_users_privileges_UsersId" ON users_privileges ("UsersId");

CREATE INDEX "IX_users_subscriptions_UsersId" ON users_subscriptions ("UsersId");

CREATE INDEX "IX_watch_lists_medias_WatchListsProfileId" ON watch_lists_medias ("WatchListsProfileId");

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250914082835_init_migration', '9.0.8');

COMMIT;


